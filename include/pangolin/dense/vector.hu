#pragma once

#ifdef __CUDACC__
#define PANGOLIN_HOST_DEVICE __host__ __device__
#define PANGOLIN_HOST __host__
#else
#define PANGOLIN_HOST_DEVICE
#define PANGOLIN_HOST
#endif

#include <cstdlib>

namespace pangolin {
template <typename VALUE_TYPE> PANGOLIN_HOST_DEVICE class Vector {
public:
  typedef VALUE_TYPE value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;

private:
  size_t capacity_;
  size_t size_;
  value_type *data_;

public:
  /*! default
   */
  PANGOLIN_HOST explicit Vector();

  /*! fill
   */
  PANGOLIN_HOST explicit Vector(size_t n);
  PANGOLIN_HOST explicit Vector(size_t count, const_reference value);

  /*!  initializer list
   */
  PANGOLIN_HOST Vector(std::initializer_list<VALUE_TYPE> il);

  // move constructor
  PANGOLIN_HOST Vector(Vector &&other);

  // copy constructor
  PANGOLIN_HOST Vector(const Vector &other);

  // destructor
  PANGOLIN_HOST ~Vector();

  // move-assignment
  PANGOLIN_HOST Vector &operator=(Vector &&other);

  PANGOLIN_HOST_DEVICE inline value_type *data() noexcept;
  PANGOLIN_HOST_DEVICE inline const value_type *data() const noexcept;

  PANGOLIN_HOST void push_back(const value_type &val);
  PANGOLIN_HOST void reserve(size_t n);
  PANGOLIN_HOST void resize(size_t n);
  PANGOLIN_HOST void resize(size_t n, const value_type &val);
  PANGOLIN_HOST void shrink_to_fit();

  /*! call cudaMemAdvise(..., cudaMemAdviseSetReadMostly, dev) on Vector data
   */
  PANGOLIN_HOST void read_mostly(const int dev);
  /*! call cudaMemAdvise(..., cudaMemAdviseSetAccessedBy, dev) on Vector data
   */
  PANGOLIN_HOST void accessed_by(const int dev);
  /*! call cudaMemPrefetchAsync(..., dev, stream) on Vector data
   */
  PANGOLIN_HOST void prefetch_async(const int dev, cudaStream_t stream = 0);

  PANGOLIN_HOST_DEVICE inline size_t capacity() const noexcept;
  PANGOLIN_HOST_DEVICE inline size_t size() const noexcept;
  PANGOLIN_HOST_DEVICE inline bool empty() const noexcept;

  PANGOLIN_HOST_DEVICE inline reference operator[](size_t n);
  PANGOLIN_HOST_DEVICE inline const_reference operator[](size_t n) const;

  PANGOLIN_HOST_DEVICE value_type *begin() { return data_; }
  PANGOLIN_HOST_DEVICE const value_type *begin() const { return data_; }
  PANGOLIN_HOST_DEVICE value_type *end() { return data_; }
  PANGOLIN_HOST_DEVICE const value_type *end() const { return data_; }
};

} // namespace pangolin

#undef PANGOLIN_HOST_DEVICE
#undef PANGOLIN_HOST

#include "vector-impl.hu"

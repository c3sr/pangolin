#pragma once

#ifdef __CUDACC__
#define PANGOLIN_HOST_DEVICE __host__ __device__
#define PANGOLIN_HOST __host__
#else
#define PANGOLIN_HOST_DEVICE
#define PANGOLIN_HOST
#endif

#include <cstdlib>

namespace pangolin {
template <typename VALUE_TYPE> class Vector {
public:
  typedef VALUE_TYPE value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;

private:
  size_t capacity_;  //<! the number of elements the underlying allocation can hold
  size_t size_;      //<! the number of elements in the vector
  value_type *data_; //<! the underlying allocation

public:
  PANGOLIN_HOST explicit Vector(void);
  PANGOLIN_HOST explicit Vector(size_t n);
  PANGOLIN_HOST explicit Vector(size_t n, const_reference val);
  PANGOLIN_HOST Vector(std::initializer_list<VALUE_TYPE> il);
  PANGOLIN_HOST Vector(Vector &&other);
  PANGOLIN_HOST Vector(const Vector &other);
  PANGOLIN_HOST ~Vector();

  PANGOLIN_HOST Vector &operator=(Vector &&other) noexcept;
  PANGOLIN_HOST Vector &operator=(const Vector &other);

  PANGOLIN_HOST bool operator==(const Vector &other) const noexcept;

  PANGOLIN_HOST void swap(Vector &other) noexcept;

  PANGOLIN_HOST_DEVICE inline value_type *data() noexcept;
  PANGOLIN_HOST_DEVICE inline const value_type *data() const noexcept;

  PANGOLIN_HOST void push_back(const value_type &val);
  PANGOLIN_HOST void reserve(size_t n);
  PANGOLIN_HOST void resize(size_t n);
  PANGOLIN_HOST void resize(size_t n, const value_type &val);
  PANGOLIN_HOST void shrink_to_fit();

  PANGOLIN_HOST void read_mostly();
  PANGOLIN_HOST void accessed_by(const int dev);
  PANGOLIN_HOST void prefetch_async(const int dev, cudaStream_t stream = 0);

  PANGOLIN_HOST_DEVICE inline size_t capacity() const noexcept;
  PANGOLIN_HOST_DEVICE inline size_t size() const noexcept;
  PANGOLIN_HOST_DEVICE inline bool empty() const noexcept;

  PANGOLIN_HOST_DEVICE inline reference operator[](size_t n);
  PANGOLIN_HOST_DEVICE inline const_reference operator[](size_t n) const;

  PANGOLIN_HOST_DEVICE inline value_type *begin() noexcept { return data_; }
  PANGOLIN_HOST_DEVICE inline value_type *end() noexcept { return data_ + size_; }
  PANGOLIN_HOST_DEVICE inline const value_type *begin() const noexcept { return data_; }
  PANGOLIN_HOST_DEVICE inline const value_type *end() const noexcept { return data_ + size_; }
};

} // namespace pangolin

#undef PANGOLIN_HOST_DEVICE
#undef PANGOLIN_HOST

#include "vector-impl.hu"

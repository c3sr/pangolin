# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

stages:
- stage:
  jobs:
  - job:
    strategy:
      matrix:
        Debug_NUMA_OPENMPI:
          CMAKE_BUILD_TYPE: 'Debug'
          INSTALL_NUMA: True    
          INSTALL_OPENMPI: True
        Debug_OPENMPI:
          CMAKE_BUILD_TYPE: 'Debug'
          INSTALL_NUMA: False  
          INSTALL_OPENMPI: True    
        Debug_NUMA:
          CMAKE_BUILD_TYPE: 'Debug'
          INSTALL_NUMA: True
        Debug:
          CMAKE_BUILD_TYPE: 'Debug'
          INSTALL_NUMA: False
        Release_NUMA:
          CMAKE_BUILD_TYPE: 'Release'
          INSTALL_NUMA: True
        Release:
          CMAKE_BUILD_TYPE: 'Release'
          INSTALL_NUMA: False
    pool: 'amd64-ubuntu1604-cuda100'
    steps:
    - script: |
        set -x
        apt-get update
        apt-get install -y --no-install-suggests --no-install-recommends -y \
        curl
      displayName: 'Install curl'

    - script: |
        set -x
        apt-get update;
        apt-get install -y --no-install-suggests --no-install-recommends -y \
        libnuma-dev;
      displayName: 'Install numa'
      condition: eq(variables['INSTALL_NUMA'], 'True')

    - script: |
        set -x
        apt-get update;
        apt-get install -y --no-install-suggests --no-install-recommends -y \
        libopenmpi-dev \
        openmpi-bin;
      displayName: 'Install OpenMPI'
      condition: eq(variables['INSTALL_OPENMPI'], 'True')

    - script: |
        set -x
        curl -SLO https://github.com/Kitware/CMake/releases/download/v3.14.3/cmake-3.14.3-Linux-x86_64.sh
        chmod +x cmake-3.14.3-Linux-x86_64.sh
        ./cmake-3.14.3-Linux-x86_64.sh --skip-license --prefix=/usr/local
      displayName: 'Install CMake'

    - script: |
        set -x
        apt-get update
        apt-get install -y \
        cuda-command-line-tools-10-0 \
        cuda-cusparse-dev-10-0 \
        cuda-nvml-dev-10-0 \
        cuda-nvgraph-dev-10-0
        echo '##vso[task.prependpath]/usr/local/cuda-10.0/bin/'
      displayName: 'Install CUDA 10.0'

    - script: |
        set -x
        which cmake
        cmake --version
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE)
      displayName: 'configure'

    - script: |
        set -x
        cd build
        make -j `nproc` -O VERBOSE=1
      displayName: 'build'

    - script: |
        set -x
        nvidia-smi
      displayName: 'nvidia-smi'

    - script: |
        set -x
        env | grep PANGOLIN_GRAPH_DIR
        cd build
        ctest --output-on-failure --timeout 300 -T Test -LE mpi
      displayName: 'test'
      condition: eq(variables['INSTALL_OPENMPI'], 'False')

    - script: |
        set -x
        env | grep PANGOLIN_GRAPH_DIR
        cd build
        ctest --output-on-failure --timeout 300 -T Test
      displayName: 'test (MPI)'
      condition: eq(variables['INSTALL_OPENMPI'], 'True')

    # Publish Test Results
    # Publish Test Results to Azure Pipelines/TFS
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'cTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/Test.xml' 
        #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        #failTaskOnFailedTests: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional